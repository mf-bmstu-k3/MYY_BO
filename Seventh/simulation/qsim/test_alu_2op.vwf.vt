// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2023 16:06:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ctrl_un_BO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ctrl_un_BO_vlg_sample_tst(
	a,
	b,
	clk,
	cop,
	set,
	sno,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input  clk;
input  cop;
input  set;
input  sno;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clk or cop or set or sno)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ctrl_un_BO_vlg_check_tst (
	priznak,
	rr,
	sko,
	sampler_rx
);
input [1:0] priznak;
input [7:0] rr;
input  sko;
input sampler_rx;

reg [1:0] priznak_expected;
reg [7:0] rr_expected;
reg  sko_expected;

reg [1:0] priznak_prev;
reg [7:0] rr_prev;
reg  sko_prev;

reg [1:0] priznak_expected_prev;
reg [7:0] rr_expected_prev;
reg  sko_expected_prev;

reg [1:0] last_priznak_exp;
reg [7:0] last_rr_exp;
reg  last_sko_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	priznak_prev = priznak;
	rr_prev = rr;
	sko_prev = sko;
end

// update expected /o prevs

always @(trigger)
begin
	priznak_expected_prev = priznak_expected;
	rr_expected_prev = rr_expected;
	sko_expected_prev = sko_expected;
end


// expected rr[ 7 ]
initial
begin
	rr_expected[7] = 1'bX;
end 
// expected rr[ 6 ]
initial
begin
	rr_expected[6] = 1'bX;
end 
// expected rr[ 5 ]
initial
begin
	rr_expected[5] = 1'bX;
end 
// expected rr[ 4 ]
initial
begin
	rr_expected[4] = 1'bX;
end 
// expected rr[ 3 ]
initial
begin
	rr_expected[3] = 1'bX;
end 
// expected rr[ 2 ]
initial
begin
	rr_expected[2] = 1'bX;
end 
// expected rr[ 1 ]
initial
begin
	rr_expected[1] = 1'bX;
end 
// expected rr[ 0 ]
initial
begin
	rr_expected[0] = 1'bX;
end 
// expected priznak[ 1 ]
initial
begin
	priznak_expected[1] = 1'bX;
end 
// expected priznak[ 0 ]
initial
begin
	priznak_expected[0] = 1'bX;
end 

// expected sko
initial
begin
	sko_expected = 1'bX;
end 
// generate trigger
always @(priznak_expected or priznak or rr_expected or rr or sko_expected or sko)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected priznak = %b | expected rr = %b | expected sko = %b | ",priznak_expected_prev,rr_expected_prev,sko_expected_prev);
	$display("| real priznak = %b | real rr = %b | real sko = %b | ",priznak_prev,rr_prev,sko_prev);
`endif
	if (
		( priznak_expected_prev[0] !== 1'bx ) && ( priznak_prev[0] !== priznak_expected_prev[0] )
		&& ((priznak_expected_prev[0] !== last_priznak_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port priznak[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", priznak_expected_prev);
		$display ("     Real value = %b", priznak_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_priznak_exp[0] = priznak_expected_prev[0];
	end
	if (
		( priznak_expected_prev[1] !== 1'bx ) && ( priznak_prev[1] !== priznak_expected_prev[1] )
		&& ((priznak_expected_prev[1] !== last_priznak_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port priznak[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", priznak_expected_prev);
		$display ("     Real value = %b", priznak_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_priznak_exp[1] = priznak_expected_prev[1];
	end
	if (
		( rr_expected_prev[0] !== 1'bx ) && ( rr_prev[0] !== rr_expected_prev[0] )
		&& ((rr_expected_prev[0] !== last_rr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[0] = rr_expected_prev[0];
	end
	if (
		( rr_expected_prev[1] !== 1'bx ) && ( rr_prev[1] !== rr_expected_prev[1] )
		&& ((rr_expected_prev[1] !== last_rr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[1] = rr_expected_prev[1];
	end
	if (
		( rr_expected_prev[2] !== 1'bx ) && ( rr_prev[2] !== rr_expected_prev[2] )
		&& ((rr_expected_prev[2] !== last_rr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[2] = rr_expected_prev[2];
	end
	if (
		( rr_expected_prev[3] !== 1'bx ) && ( rr_prev[3] !== rr_expected_prev[3] )
		&& ((rr_expected_prev[3] !== last_rr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[3] = rr_expected_prev[3];
	end
	if (
		( rr_expected_prev[4] !== 1'bx ) && ( rr_prev[4] !== rr_expected_prev[4] )
		&& ((rr_expected_prev[4] !== last_rr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[4] = rr_expected_prev[4];
	end
	if (
		( rr_expected_prev[5] !== 1'bx ) && ( rr_prev[5] !== rr_expected_prev[5] )
		&& ((rr_expected_prev[5] !== last_rr_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[5] = rr_expected_prev[5];
	end
	if (
		( rr_expected_prev[6] !== 1'bx ) && ( rr_prev[6] !== rr_expected_prev[6] )
		&& ((rr_expected_prev[6] !== last_rr_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[6] = rr_expected_prev[6];
	end
	if (
		( rr_expected_prev[7] !== 1'bx ) && ( rr_prev[7] !== rr_expected_prev[7] )
		&& ((rr_expected_prev[7] !== last_rr_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rr_exp[7] = rr_expected_prev[7];
	end
	if (
		( sko_expected_prev !== 1'bx ) && ( sko_prev !== sko_expected_prev )
		&& ((sko_expected_prev !== last_sko_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sko :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sko_expected_prev);
		$display ("     Real value = %b", sko_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sko_exp = sko_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ctrl_un_BO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg clk;
reg cop;
reg set;
reg sno;
// wires                                               
wire [1:0] priznak;
wire [7:0] rr;
wire sko;

wire sampler;                             

// assign statements (if any)                          
ctrl_un_BO i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk(clk),
	.cop(cop),
	.priznak(priznak),
	.rr(rr),
	.set(set),
	.sko(sko),
	.sno(sno)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #10000 1'b0;
	a[3] = #60000 1'b1;
	a[3] = #10000 1'b0;
	a[3] = #130000 1'b1;
	a[3] = #10000 1'b0;
	a[3] = #140000 1'b1;
	a[3] = #10000 1'b0;
	a[3] = #120000 1'b1;
	a[3] = #10000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #10000 1'b1;
	a[2] = #10000 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #10000 1'b0;
	a[2] = #210000 1'b1;
	a[2] = #10000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #10000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #200000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #130000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #80000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #70000 1'b1;
	a[1] = #10000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #130000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #130000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #60000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #80000 1'b1;
	a[0] = #10000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #80000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #60000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #60000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #130000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #200000 1'b1;
	b[3] = #10000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #130000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #60000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #340000 1'b1;
	b[2] = #10000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #80000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #200000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #60000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #30000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #30000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #10000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #270000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #60000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #70000 1'b1;
	b[0] = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// sno
initial
begin
	sno = 1'b0;
	sno = #10000 1'b1;
	sno = #10000 1'b0;
	sno = #60000 1'b1;
	sno = #10000 1'b0;
	sno = #60000 1'b1;
	sno = #10000 1'b0;
	sno = #60000 1'b1;
	sno = #10000 1'b0;
	sno = #60000 1'b1;
	sno = #10000 1'b0;
	sno = #60000 1'b1;
	sno = #10000 1'b0;
	sno = #30000 1'b1;
	sno = #10000 1'b0;
	sno = #30000 1'b1;
	sno = #10000 1'b0;
	sno = #40000 1'b1;
	sno = #10000 1'b0;
	sno = #30000 1'b1;
	sno = #10000 1'b0;
	sno = #30000 1'b1;
	sno = #10000 1'b0;
end 

// set
initial
begin
	set = 1'b1;
	set = #10000 1'b0;
end 

// cop
initial
begin
	cop = 1'b1;
	cop = #360000 1'b0;
end 

ctrl_un_BO_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clk(clk),
	.cop(cop),
	.set(set),
	.sno(sno),
	.sampler_tx(sampler)
);

ctrl_un_BO_vlg_check_tst tb_out(
	.priznak(priznak),
	.rr(rr),
	.sko(sko),
	.sampler_rx(sampler)
);
endmodule

